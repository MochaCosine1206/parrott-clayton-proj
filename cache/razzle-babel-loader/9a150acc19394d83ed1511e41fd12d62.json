{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport createDataContext from \"./createDataContext\";\nimport listings from \"../data/listings\";\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_DATA\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload.data,\n        totalLength: action.payload.totalLength\n      });\n\n    case \"EXTEND_LISTINGS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload\n      });\n\n    case \"SORT_LISTINGS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload.data,\n        priceSortValue: action.payload.priceSortValue\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst getData = dispatch => () => {\n  const data = listings.slice(0, 9);\n  dispatch({\n    type: \"GET_DATA\",\n    payload: {\n      data: data,\n      totalLength: listings.length\n    }\n  });\n};\n\nconst extendResults = dispatch => ({\n  currentAmount\n}) => {\n  const extendedListings = listings.slice(0, currentAmount += 3);\n  dispatch({\n    type: \"EXTEND_LISTINGS\",\n    payload: extendedListings\n  });\n};\n\nconst sortHomesByPrice = dispatch => ({\n  priceSortValue\n}) => {\n  let data = listings.slice(0, 9);\n  console.log(priceSortValue);\n\n  switch (priceSortValue) {\n    case \"low\":\n      data = data.sort((a, b) => a.startingPrice - b.startingPrice);\n      dispatch({\n        type: \"SORT_LISTINGS\",\n        payload: {\n          data,\n          priceSortValue\n        }\n      });\n\n    case \"high\":\n      data = data.sort((a, b) => b.startingPrice - a.startingPrice);\n      dispatch({\n        type: \"SORT_LISTINGS\",\n        payload: {\n          data,\n          priceSortValue\n        }\n      });\n\n    default:\n      break;\n  }\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(dataReducer, {\n  getData,\n  extendResults,\n  sortHomesByPrice\n}, {\n  data: [],\n  totalLength: 200,\n  priceSortValue: \"\"\n});","map":{"version":3,"sources":["/Users/stevenparrott/Documents/Projects/clayton/parrott-clayton-proj/src/context/DataContext.js"],"names":["createDataContext","listings","dataReducer","state","action","type","data","payload","totalLength","priceSortValue","getData","dispatch","slice","length","extendResults","currentAmount","extendedListings","sortHomesByPrice","console","log","sort","a","b","startingPrice","Provider","Context"],"mappings":";;;;;;AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,6CAAWF,KAAX;AAAkBG,QAAAA,IAAI,EAAEF,MAAM,CAACG,OAAP,CAAeD,IAAvC;AAA6CE,QAAAA,WAAW,EAAEJ,MAAM,CAACG,OAAP,CAAeC;AAAzE;;AACF,SAAK,iBAAL;AACE,6CAAWL,KAAX;AAAkBG,QAAAA,IAAI,EAAEF,MAAM,CAACG;AAA/B;;AACF,SAAK,eAAL;AACE,6CAAWJ,KAAX;AAAkBG,QAAAA,IAAI,EAAEF,MAAM,CAACG,OAAP,CAAeD,IAAvC;AAA6CG,QAAAA,cAAc,EAAEL,MAAM,CAACG,OAAP,CAAeE;AAA5E;;AACF;AACE,aAAON,KAAP;AARJ;AAUD,CAXD;;AAaA,MAAMO,OAAO,GAAIC,QAAD,IAAc,MAAM;AAClC,QAAML,IAAI,GAAGL,QAAQ,CAACW,KAAT,CAAe,CAAf,EAAiB,CAAjB,CAAb;AACAD,EAAAA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAE,UAAR;AAAoBE,IAAAA,OAAO,EAAE;AAACD,MAAAA,IAAI,EAAEA,IAAP;AAAaE,MAAAA,WAAW,EAAEP,QAAQ,CAACY;AAAnC;AAA7B,GAAD,CAAR;AACD,CAHD;;AAKA,MAAMC,aAAa,GAAIH,QAAD,IAAc,CAAC;AAAEI,EAAAA;AAAF,CAAD,KAAuB;AACzD,QAAMC,gBAAgB,GAAGf,QAAQ,CAACW,KAAT,CAAe,CAAf,EAAkBG,aAAa,IAAI,CAAnC,CAAzB;AACAJ,EAAAA,QAAQ,CAAC;AAAEN,IAAAA,IAAI,EAAE,iBAAR;AAA2BE,IAAAA,OAAO,EAAES;AAApC,GAAD,CAAR;AACD,CAHD;;AAKA,MAAMC,gBAAgB,GAAIN,QAAD,IAAc,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAwB;AAC7D,MAAIH,IAAI,GAAGL,QAAQ,CAACW,KAAT,CAAe,CAAf,EAAiB,CAAjB,CAAX;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYV,cAAZ;;AACA,UAAOA,cAAP;AACE,SAAK,KAAL;AACEH,MAAAA,IAAI,GAAGA,IAAI,CAACc,IAAL,CAAU,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACE,aAAF,GAAkBD,CAAC,CAACC,aAAvC,CAAP;AACAZ,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,eAAR;AAAyBE,QAAAA,OAAO,EAAE;AAACD,UAAAA,IAAD;AAAOG,UAAAA;AAAP;AAAlC,OAAD,CAAR;;AACF,SAAK,MAAL;AACEH,MAAAA,IAAI,GAAGA,IAAI,CAACc,IAAL,CAAU,CAACC,CAAD,EAAGC,CAAH,KAASA,CAAC,CAACC,aAAF,GAAkBF,CAAC,CAACE,aAAvC,CAAP;AACAZ,MAAAA,QAAQ,CAAC;AAAEN,QAAAA,IAAI,EAAE,eAAR;AAAyBE,QAAAA,OAAO,EAAE;AAACD,UAAAA,IAAD;AAAOG,UAAAA;AAAP;AAAlC,OAAD,CAAR;;AACF;AACE;AARJ;AAWD,CAdD;;AAgBA,OAAO,MAAM;AAAEe,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAwBzB,iBAAiB,CACpDE,WADoD,EAEpD;AAACQ,EAAAA,OAAD;AAAUI,EAAAA,aAAV;AAAyBG,EAAAA;AAAzB,CAFoD,EAGpD;AAAEX,EAAAA,IAAI,EAAE,EAAR;AAAYE,EAAAA,WAAW,EAAE,GAAzB;AAA8BC,EAAAA,cAAc,EAAE;AAA9C,CAHoD,CAA/C","sourcesContent":["import createDataContext from \"./createDataContext\";\nimport listings from \"../data/listings\"\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_DATA\":\n      return {...state, data: action.payload.data, totalLength: action.payload.totalLength}\n    case \"EXTEND_LISTINGS\":\n      return {...state, data: action.payload}\n    case \"SORT_LISTINGS\":\n      return {...state, data: action.payload.data, priceSortValue: action.payload.priceSortValue}\n    default:\n      return state;\n  }\n};\n\nconst getData = (dispatch) => () => {\n  const data = listings.slice(0,9)\n  dispatch({ type: \"GET_DATA\", payload: {data: data, totalLength: listings.length} })\n}\n\nconst extendResults = (dispatch) => ({ currentAmount }) => {\n  const extendedListings = listings.slice(0, currentAmount += 3)\n  dispatch({ type: \"EXTEND_LISTINGS\", payload: extendedListings })\n}\n\nconst sortHomesByPrice = (dispatch) => ({ priceSortValue }) => {\n  let data = listings.slice(0,9)\n  console.log(priceSortValue)\n  switch(priceSortValue) {\n    case \"low\":\n      data = data.sort((a,b) => a.startingPrice - b.startingPrice)\n      dispatch({ type: \"SORT_LISTINGS\", payload: {data, priceSortValue} })\n    case \"high\":\n      data = data.sort((a,b) => b.startingPrice - a.startingPrice)\n      dispatch({ type: \"SORT_LISTINGS\", payload: {data, priceSortValue} })\n    default:\n      break;  \n  }\n  \n}\n\nexport const { Provider, Context } = createDataContext(\n  dataReducer,\n  {getData, extendResults, sortHomesByPrice},\n  { data: [], totalLength: 200, priceSortValue: \"\" }\n);\n"]},"metadata":{},"sourceType":"module"}