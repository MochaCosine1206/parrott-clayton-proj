{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport createDataContext from \"./createDataContext\";\nimport listings from \"../data/listings\";\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_DATA\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst getData = dispatch => {\n  const data = listings;\n  dispatch({\n    type: \"GET_DATA\",\n    payload: data\n  });\n};\n\nexport const {\n  Provider,\n  Context\n} = createDataContext(dataReducer, {\n  getData\n}, {\n  data: []\n});","map":{"version":3,"sources":["/Users/stevenparrott/Documents/Projects/clayton/parrott-clayton-proj/src/context/DataContext.js"],"names":["createDataContext","listings","dataReducer","state","action","type","data","payload","getData","dispatch","Provider","Context"],"mappings":";;;;;;AAAA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,6CAAWF,KAAX;AAAkBG,QAAAA,IAAI,EAAEF,MAAM,CAACG;AAA/B;;AACF;AACE,aAAOJ,KAAP;AAJJ;AAMD,CAPD;;AASA,MAAMK,OAAO,GAAIC,QAAD,IAAc;AAC5B,QAAMH,IAAI,GAAGL,QAAb;AACAQ,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAE,UAAR;AAAoBE,IAAAA,OAAO,EAAED;AAA7B,GAAD,CAAR;AACD,CAHD;;AAKA,OAAO,MAAM;AAAEI,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,IAAwBX,iBAAiB,CACpDE,WADoD,EAEpD;AAACM,EAAAA;AAAD,CAFoD,EAGpD;AAAEF,EAAAA,IAAI,EAAE;AAAR,CAHoD,CAA/C","sourcesContent":["import createDataContext from \"./createDataContext\";\nimport listings from \"../data/listings\"\n\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_DATA\":\n      return {...state, data: action.payload}\n    default:\n      return state;\n  }\n};\n\nconst getData = (dispatch) => {\n  const data = listings\n  dispatch({ type: \"GET_DATA\", payload: data })\n}\n\nexport const { Provider, Context } = createDataContext(\n  dataReducer,\n  {getData},\n  { data: [] }\n);\n"]},"metadata":{},"sourceType":"module"}